#!/bin/bash
#
# Mark J Swift
sv_CodeVersion="1.0.1" 

# ---

# Take a note when this script started running
sv_ThisScriptStartEpoch=$(date -u "+%s")

# Full souce of this script
sv_ThisScriptFilePath="${0}"

# Script name
sv_ThisScriptFileName="$(basename "${sv_ThisScriptFilePath}")"

# Path to this script
sv_ThisScriptDirPath="$(dirname "${sv_ThisScriptFilePath}")"

# ---

sv_RadCmdDir="/usr/local/bin"

if ! test -f "${sv_RadCmdDir}"/lsort
then
  sv_RadCmdDir="${sv_ThisScriptDirPath}"/bin
fi

if ! test -f "${sv_RadCmdDir}"/lsort
then
  sv_RadCmdDir="${sv_ThisScriptDirPath}"
fi

if ! test -f "${sv_RadCmdDir}"/lsort
then
  echo 1>&2 "${sv_ThisScriptFileName}: Installation error, please install the Radmind tools"
  exit 0
fi

# ---

# Get user name
sv_ThisUserName="$(whoami)"

# ---

if [ "${sv_ThisUserName}" != "root" ]
then
  echo >&2 "${sv_ThisScriptFileName}: Permission error, you must be root to run this script."
  exit 0
fi

# ---
# We are root
# ---

# Get parameter(s)
sv_SrcTranscriptFilePath="${1}"
if test -z "${sv_SrcTranscriptFilePath}"
then
  echo 1>&2 "${sv_ThisScriptFileName}: Syntax, ${sv_ThisScriptFileName} SourceTranscriptFile [DestTranscriptFile [DummyRun(Y/N)]]"
  exit 0
fi

if ! test -e "${sv_SrcTranscriptFilePath}"
then
  echo 1>&2 "${sv_ThisScriptFileName}: File not found, ${sv_SrcTranscriptFilePath}"
  exit 0
fi

sv_SrcTranscriptFileName="$(basename "${sv_SrcTranscriptFilePath}")"

# ---

sv_DstTranscriptFilePath="${2}"
if test -z "${sv_DstTranscriptFilePath}"
then
  sv_DstTranscriptFilePath="${sv_SrcTranscriptFilePath}"
  
else
  sv_DummyRun="${3}"
  if [ "${sv_DummyRun}" != "N" ]
  then
    sv_DummyRun="Y"
  fi
  
fi

sv_DstTranscriptFileName="$(basename "${sv_DstTranscriptFilePath}")"

# ---

echo 1>&2 "${sv_ThisScriptFileName}: Processing ${sv_SrcTranscriptFileName}"

# ---

# Create a temporary directory
sv_TmpDir=$(mktemp -d "/tmp/$(basename ${0}).XXXXXXXX")

sv_TmpTranscriptFilePath="${sv_TmpDir}/${sv_DstTranscriptFileName}"

# ---

sv_CTLM=$(echo "a" | tr "a" "\015")

# ---

cp -p "${sv_SrcTranscriptFilePath}" "${sv_TmpTranscriptFilePath}"
sv_TmpTranscriptFileName="$(basename "${sv_TmpTranscriptFilePath}")"
sv_TmpTranscriptName="$(echo "${sv_TmpTranscriptFileName}" | sed 's|\.[^.]*$||')"

iv_FirstModEpoch=$(stat -f "%m" "${sv_TmpTranscriptFilePath}")

cat "${sv_TmpTranscriptFilePath}" | grep "^a" | cut -f1 | cut -d" " -f2- | cut -d" " -f1 | sed "s|[ ]*$||" | sed "s|\\\b| |g" | sed "s|\\\r|""${sv_CTLM}""|g" | sed "s|\\\\\\\|\\\|g" | while read sv_aFile
do
  if [ -s "${sv_aFile}/..namedfork/rsrc" ]
  then
    # File has a resource, so we should remove it

    # First, make sure that the file will remain an applefile in the transcript
    if test -z "$(xattr 2>/dev/null -p com.apple.FinderInfo "${sv_aFile}")"
    then
      if [ "${sv_DummyRun}" = "N" ]
      then
        xattr -wx com.apple.FinderInfo "0000000000000000000C00000000000000000000000000000000000000000000" "${sv_aFile}"
      fi
      echo 1>&2 "${sv_ThisScriptFileName}:Adding label to ${sv_aFile}"
    fi

    echo 1>&2 "${sv_ThisScriptFileName}:Removing resource from ${sv_aFile}"
    if [ "${sv_DummyRun}" = "N" ]
    then
      cat /dev/null > "${sv_aFile}/..namedfork/rsrc"
    fi

    touch "${sv_TmpTranscriptFilePath}"
  fi
done

iv_LastModEpoch=$(stat -f "%m" "${sv_TmpTranscriptFilePath}")
  
if [ ${iv_LastModEpoch} -eq ${iv_FirstModEpoch} ]
then
  echo 1>&2 "${sv_ThisScriptFileName}: No changes made"
  if [ "${sv_SrcTranscriptFilePath}" != "${sv_DstTranscriptFilePath}" ]
  then
    cp -pf "${sv_SrcTranscriptFilePath}" "${sv_DstTranscriptFilePath}"
  fi
else
  echo 1>&2 "${sv_ThisScriptFileName}: Changes made"
  cp -pf "${sv_TmpTranscriptFilePath}" "${sv_DstTranscriptFilePath}"
fi

rm -fR ${sv_TmpDir}
  
echo 1>&2 "${sv_ThisScriptFileName}: Complete, processed ${sv_SrcTranscriptFileName} in "$(($(date -u "+%s")-${sv_ThisScriptStartEpoch}))" seconds"

