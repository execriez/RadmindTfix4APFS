#!/bin/bash
#
# Mark J Swift
sv_CodeVersion="1.0.1" 

# ---

# Set verbose flag to "V" for more messages
sv_VerboseFlag=""

# ---

# Take a note when this script started running
sv_ThisScriptStartEpoch=$(date -u "+%s")

# Full souce of this script
sv_ThisScriptFilePath="${0}"

# Filename without extension
sv_ThisScriptFileName="$(basename "${sv_ThisScriptFilePath}")"

# Path to this script
sv_ThisScriptDirPath="$(dirname "${sv_ThisScriptFilePath}")"

# ---

# Get user name
sv_ThisUserName="$(whoami)"

# ---

# Check if user is an admin (returns "true" or "false")
if [ "$(dseditgroup -o checkmember -m "${sv_ThisUserName}" admin | cut -d" " -f1)" = "yes" ]
then
  bv_ThisUserIsAdmin="true"
else
  bv_ThisUserIsAdmin="false"
fi

# ---

if [ "${bv_ThisUserIsAdmin}" = "false" ]
then
  echo >&2 "${sv_ThisScriptFileName}: Permission error: You must be an admin to run this script."
  exit 0
fi

# ---

if [ "${sv_ThisUserName}" != "root" ]
then

  sudo "${sv_ThisScriptFilePath}" "${sv_RadmindServerAddress}"
  
else
  # We are root

  # ---

  sv_RadCmdDir="/usr/local/bin"
  if ! test -f "${sv_RadCmdDir}"/lsort
  then
    sv_RadCmdDir="${sv_ThisScriptDirPath}"/bin
  fi

  if ! test -f "${sv_RadCmdDir}"/lsort
  then
    sv_RadCmdDir="${sv_ThisScriptDirPath}"
  fi

  if ! test -f "${sv_RadCmdDir}"/lsort
  then
    echo 1>&2 "${sv_ThisScriptFileName}: Installation error, Please install the Radmind tools"
    exit 0
  fi

  # ---

  if [ ! -e /private/var/radmind/client/command.K ]
  then
    echo >&2 "${sv_ThisScriptFileName}: Aborted, radmind command file (command.K) not found"
    exit 0
  fi

  # ---

  # Check for a dummy run
  sv_DummyRun="Y"

  printf >&2 "Dummy run? (type N to make live changes) [${sv_DummyRun}]:";read sv_String
  if [ -n "${sv_String}" ]
  then
    sv_DummyRun="${sv_String}"
  fi
  if [ "${sv_DummyRun}" != "N" ]
  then
    sv_DummyRun="Y"
  fi
  
  # ---

  # Get radmind server address
  sv_RadmindServerAddress=""

  if [ "${sv_DummyRun}" = "N" ]
  then
    echo >&2 "${sv_ThisScriptFileName}: Performing a LIVE run, changes will be made to this filesystem"

    printf >&2 "Enter Radmind server IP or FQDN [${sv_RadmindServerAddress}]:";read sv_String
    if [ -n "${sv_String}" ]
    then
      sv_RadmindServerAddress="${sv_String}"
    fi

    if [ -z "${sv_RadmindServerAddress}" ]
    then
      echo >&2 "${sv_ThisScriptFileName}: Aborted, no server specified"
      exit 0
    fi
    
  else
    echo >&2 "${sv_ThisScriptFileName}: Performing a dummy run, no changes will be made."
    
  fi
  
  # ---

  # Create a temporary directory
  sv_TmpDir=$(mktemp -d "/tmp/$(basename ${0}).XXXXXXXX")

  sv_ESCR=$(echo "a" | tr "a" "\015")
  
  # ---

  "${sv_ThisScriptDirPath}"/bin/RADexplodeK.sh /private/var/radmind/client/command.K | grep "^p" | cut -d" " -f2 | while read sv_SrcTranscriptFileName
  do
    sv_SrcTranscriptFilePath=/private/var/radmind/client/"${sv_SrcTranscriptFileName}"
 
    if test -e "${sv_SrcTranscriptFilePath}"
    then
      sv_SrcTranscriptFileName="$(basename "${sv_SrcTranscriptFilePath}")"
      
      # ---

      if test -n "$(cat "${sv_SrcTranscriptFilePath}" | grep -E "[afld] /mach_kernel")"
      then
        # Don't process OS transcripts
        if test -n "${sv_VerboseFlag}"
        then
          echo 1>&2 "${sv_ThisScriptFileName}: Skipping MacOS transcript, ${sv_SrcTranscriptFileName}"
        fi

      else

        sv_TmpTranscriptFilePath="${sv_TmpDir}/${sv_SrcTranscriptFileName}"
        sv_TmpTranscriptFileName="$(basename "${sv_TmpTranscriptFilePath}")"
        sv_TmpTranscriptName="$(echo "${sv_TmpTranscriptFileName}" | sed 's|\.[^.]*$||')"

        cp -p "${sv_SrcTranscriptFilePath}" "${sv_TmpTranscriptFilePath}"

        # ---

        iv_originalModEpoch=$(stat -f "%m" "${sv_TmpTranscriptFilePath}")
        iv_LastModEpoch=${iv_originalModEpoch}

        # ---

        iv_PreModEpoch=${iv_LastModEpoch}

        "${sv_ThisScriptDirPath}"/bin/RadmindTfix4SIP >/dev/null 2>&1 "${sv_TmpTranscriptFilePath}"

        iv_LastModEpoch=$(stat -f "%m" "${sv_TmpTranscriptFilePath}")
  
        if [ ${iv_LastModEpoch} -ne ${iv_PreModEpoch} ]
        then
          mv "${sv_TmpTranscriptFilePath}" "${sv_TmpDir}/${sv_TmpTranscriptName}-fix4SIP.T" 

          sv_TmpTranscriptFilePath="${sv_TmpDir}/${sv_TmpTranscriptName}-fix4SIP.T"
          sv_TmpTranscriptFileName="$(basename "${sv_TmpTranscriptFilePath}")"
          sv_TmpTranscriptName="$(echo "${sv_TmpTranscriptFileName}" | sed 's|\.[^.]*$||')"
        fi

        # ---

        iv_PreModEpoch=${iv_LastModEpoch}

        "${sv_ThisScriptDirPath}"/bin/RadmindTDerez >/dev/null 2>&1 "${sv_TmpTranscriptFilePath}" "${sv_TmpTranscriptFilePath}" "${sv_DummyRun}"

        iv_LastModEpoch=$(stat -f "%m" "${sv_TmpTranscriptFilePath}")
  
        if [ ${iv_LastModEpoch} -ne ${iv_PreModEpoch} ]
        then
          mv "${sv_TmpTranscriptFilePath}" "${sv_TmpDir}/${sv_TmpTranscriptName}-derez.T"

          sv_TmpTranscriptFilePath="${sv_TmpDir}/${sv_TmpTranscriptName}-derez.T"
          sv_TmpTranscriptFileName="$(basename "${sv_TmpTranscriptFilePath}")"
          sv_TmpTranscriptName="$(echo "${sv_TmpTranscriptFileName}" | sed 's|\.[^.]*$||')"
        fi

        # ---

        if [ ${iv_LastModEpoch} -eq ${iv_originalModEpoch} ]
        then
          # Do nothing if there are no changes
          if test -n "${sv_VerboseFlag}"
          then
            echo 1>&2 "${sv_ThisScriptFileName}: No changes to transcript, ${sv_TmpTranscriptFileName}"
          fi
          rm -f "${sv_TmpTranscriptFilePath}"
        
        else
          # Upload to server ignoring file differences
          echo 1>&2 "${sv_ThisScriptFileName}: Uploading changed transcript to server, ${sv_TmpTranscriptFileName}"
          if [ "${sv_DummyRun}" = "N" ]
          then
            # You may want to modify the lcreate options below
            "${sv_RadCmdDir}"/lcreate -i -q -F -w0 -h${sv_RadmindServerAddress} "${sv_TmpTranscriptFilePath}"
            
          fi

        fi

        # ---

      fi

    fi

  done
  echo 1>&2 "${sv_ThisScriptFileName} processed command.K in "$(($(date -u "+%s")-${sv_ThisScriptStartEpoch}))" seconds"
  
fi
